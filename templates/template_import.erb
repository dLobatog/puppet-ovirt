import os
import subprocess
import sys
import time
#=======Engine config===========
URL = '<%= @url %>'  # 'https://localhost:443'
USERNAME = '<%= @username %>'  # 'admin@internal'
PASSWORD = '<%= @password %>'  # 'redhat'
# =============================
#
# =======DC/Cluster config===========
DC_NAME = '<%= @dc_name %>'  # 'my_datacenter'
CLUSTER_NAME = '<%= @cluster_name %>'  # 'my_cluster'
# =============================
#
# =======storage config===========
DATA_STORAGE_NAME = '<%= @storage_name %>'  # 'my_storage'
EXPORT_STORAGE_NAME = '<%= @export_name %>'  # 'my_export'
TEMPLATE_NAME = '<%= @template_name %>'
# ======CFME=======================
VM_NAME = 'cfme'
CFME_HOSTNAME = '<%= @cfme_hostname %>'  # 'cfme.fqdn'
CFME_ROOT_PASSWORD = '<%= @cfme_root_password %>'  # changeme
# =============================
#
try:
    from ovirtsdk.api import API
    from ovirtsdk.xml import params
    from ovirtsdk.infrastructure.errors import RequestError
except:
    print "Please re-run after you have installed 'ovirt-engine-sdk-python'"
    print "Example: easy_install ovirt-engine-sdk-python"
    sys.exit()


def run_command(cmd):
    print "Running: %s" % (cmd)
    handle = subprocess.Popen(
        cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    out_msg, err_msg = handle.communicate(None)
    return handle.returncode, out_msg, err_msg

# if __name__ == "__main__":


def import_template():
    password = PASSWORD
    username = USERNAME
    url = URL

    api = API(url=url, username=username, password=password, insecure=True)
import os
import subprocess
import sys
import time
#=======Engine config===========
URL = '<%= @url %>'  # 'https://localhost:443'
USERNAME = '<%= @username %>'  # 'admin@internal'
PASSWORD = '<%= @password %>'  # 'redhat'
# =============================
#
# =======DC/Cluster config===========
DC_NAME = '<%= @dc_name %>'  # 'my_datacenter'
CLUSTER_NAME = '<%= @cluster_name %>'  # 'my_cluster'
# =============================
#
# =======storage config===========
DATA_STORAGE_NAME = '<%= @storage_name %>'  # 'my_storage'
EXPORT_STORAGE_NAME = '<%= @export_name %>'  # 'my_export'
TEMPLATE_NAME = '<%= @template_name %>'
# ======CFME=======================
VM_NAME = 'cfme'
CFME_HOSTNAME = '<%= @cfme_hostname %>'  # 'cfme.fqdn'
CFME_ROOT_PASSWORD = '<%= @cfme_root_password %>'  # changeme
# =============================
#
try:
    from ovirtsdk.api import API
    from ovirtsdk.xml import params
    from ovirtsdk.infrastructure.errors import RequestError
except:
    print "Please re-run after you have installed 'ovirt-engine-sdk-python'"
    print "Example: easy_install ovirt-engine-sdk-python"
    sys.exit()


def run_command(cmd):
    print "Running: %s" % (cmd)
    handle = subprocess.Popen(
        cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    out_msg, err_msg = handle.communicate(None)
    return handle.returncode, out_msg, err_msg

# if __name__ == "__main__":


def import_template():
    password = PASSWORD
    username = USERNAME
    url = URL

    api = API(url=url, username=username, password=password, insecure=True)
    if not api:
        print "Failed to connect to '%s'" % (url)
        sys.exit()

    imported_template_name = TEMPLATE_NAME
    export_domain_name = EXPORT_STORAGE_NAME
    storage_domain_name = DATA_STORAGE_NAME
    cluster_name = CLUSTER_NAME
    data_center_name = DC_NAME

    # Verify Export domain exists
    data_center = api.datacenters.get(data_center_name)
    export_domain = data_center.storagedomains.get(export_domain_name)
    if not export_domain:
        print "Unable to find export domain '%s'" % (export_domain_name)
        sys.exit()
    if export_domain.status.state != "active":
        print "Export domain '%s' is in unexpected state '%s'" % (export_domain_name, export_domain.state)
        sys.exit()

    ###
    # We will scp file to ovirt engine, then ssh and execute engine-image-uploaded local to the ovirt engine node
    # Alternative is we run 'rhevm-image-uploaded' from the Satellite node.
    # We need to install 'rhevm-image-uploader' RPM
    #  use "-r" of 'rhevm-image-uploader' to specify remote ovirt engine node address
    ###
#   engine_image_upload_cmd = "engine-image-uploader -u %s -p \'%s\' -N %s -e %s -v -m upload ~/%s" % (username, password, imported_vm_name, export_domain_name, cfme_image_file)
#   cmd = "ssh root@%s -o \'StrictHostKeyChecking no\' -C '%s'" % (ip, engine_image_upload_cmd)
#   status, out, err = run_command(cmd)
#    if status:
#        print "Error running:  %s" % (cmd)
#        print err
#        sys.exit()

#    print "Uploaded '%s' as '%s' to export domain '%s' on '%s'" % (cfme_image_file, imported_vm_name, export_domain_name, ip)
#    print out
    template = api.templates.get(name=imported_template_name)
    if template:
        print 'Template: ' + template.name + ' already imported'
    else:
        # Import appliance as a VM template
        #   data_center = api.datacenters.get(data_center_name)
        #   export_domain = data_center.storagedomains.get(export_domain_name)
        storage_domain = api.storagedomains.get(storage_domain_name)
        cluster = api.clusters.get(name=cluster_name)
        import_template_params = params.Action(storage_domain=storage_domain,
            cluster=cluster)
        api.storagedomains.get(export_domain_name).templates.get(
            name=imported_template_name).import_template(import_template_params)
#       export_domain.templates.get(imported_template_name).import(import_template_params)
        print 'Template was imported successfully'
        print 'Waiting for Template to reach Down status'
        while api.templates.get(name=imported_template_name).status.state != 'ok':
            time.sleep(1)


def create_vm_from_template():
   try:
       vm = api.vms.get(name=VM_NAME)

       if vm:
              print 'Vm: ' + vm.name + ' already imported'
       else:

               api.vms.add(params.VM(name=VM_NAME, cluster=api.clusters.get(
                   CLUSTER_NAME), template=api.templates.get(name=TEMPLATE_NAME)))
               print 'VM was created from Template successfully'
               print 'Waiting for VM to reach Down status'
               while api.vms.get(VM_NAME).status.state != 'down':
                   time.sleep(1)
   except Exception as e:
       print 'Failed to create VM from Template:\n%s' % str(e)

def add_disk_to_vm():
   MB = 1024*1024
   GB = 1024*MB
   exist = api.vms.get(VM_NAME).disks.get(name='DB_disk')
   if not exist:
      try:
          api.vms.get(VM_NAME).disks.add(params.Disk(storage_domains=params.StorageDomains(storage_domain=[api.storagedomains.get(DATA_STORAGE_NAME)]),
                                                      size=40*GB,
                                                   status=None,
                                                      interface='virtio',
                                                      format='cow',
                                                      sparse=True,
                                                   name='DB_disk',
                                                      bootable=False))
          print 'Disk added to VM'
          print 'Waiting for VM disk to reach Down status'
#          disk = api.vms.get(VM_NAME).disks.get(name='DB_disk')
          while api.vms.get(VM_NAME).disks.get(name='DB_disk').status.state != 'ok':
              time.sleep(1)

      except Exception as e:
          print 'Failed to create VM with disk and NIC\n%s' % str(e)
   else:
      print "VM disk '%s' already defined, skipping.." % (exist.name)

def attach_vm_network():
   profile = api.vnicprofiles.get(name='ovirtmgmt')
   vm = api.vms.get(VM_NAME)
   nic = vm.nics.get('eth0')
   status = nic.vnic_profile
   if not status:
      nic.vnic_profile = profile
      nic.update()
   else:
      print "vnic_profile '%s' already defined, skipping.." % (profile.name)

api = API(url=URL, username=USERNAME, password=PASSWORD, insecure=True)
import_template()
create_vm_from_template()
add_disk_to_vm()
attach_vm_network()
